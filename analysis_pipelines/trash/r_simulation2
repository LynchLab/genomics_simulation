library(expm)
##########################################################
# Generating a random positive-definite matrix with user-specified positive eigenvalues
# If eigenvalues are not specified, they are generated from a uniform distribution
Posdef <- function (n, ev = runif(n, 0, 10)) 
{
	Z <- matrix(ncol=n, rnorm(n^2))
	decomp <- qr(Z)
	Q <- qr.Q(decomp) 
	R <- qr.R(decomp)
	d <- diag(R)
	ph <- d / abs(d)
	O <- Q %*% diag(ph)
	Z <- t(O) %*% diag(ev) %*% O
	return(Z)
}

join <- function(matricies)
{
	nmatrix<-length(matricies)
	rnm<-sqrt(nmatrix)
	msize<-nrow(matricies[[1]])
	fsize<-rnm*msize
	q<-msize*nmatrix
	ret<-matrix( c(rep(0, q) ), ncol=fsize, nrow=fsize) 
	col<-0
	row<-0
	for (X in 0:(rnm-1))
	{
		for (Y in 0:(rnm-1))
		{
			m<-matricies[[X*rnm+Y+1]]
			for (x in 1:msize)
			{
				for (y in 1:msize)
				{
					ret[X*msize+x,Y*msize+y]<-m[x,y]
				}
			}
		}
	}
	return(ret) 
}

Rot <- function(angle){
	t<-angle[1]
	u_x<-z_hat[1]
	u_y<-z_hat[2]
	u_z<-z_hat[3]
	Rmatrix<-matrix(c(cos(t)+u_x^2*(1-cos(t)), 	u_x*u_y*(1-cos(t) )-u_z*sin(t),	u_x*u_z*(1-cos(t) )+u_y*sin(t), u_y*u_x*(1-cos(t))+u_z*sin(t),	cos(t)+u_y^2*(1-cos(t) ), u_y*u_z*(1-cos(t) )-u_x*sin(t), u_z*u_x*(1-cos(t))-u_y*sin(t), u_z*u_y*(1-cos(t) )+u_x*sin(t), cos(t)+u_z^2*(1-cos(t) ) ), ncol=3, nrow=3)
	return (Rmatrix)
}

#transform <- function{
#	
#}
Set_rot <- function (axis) {
	N<-length(axis)
	basis<<-gramSchmidt(matrix(c(axis, diag(N)[,2:N] ), ncol=N, nrow=N) )$Q
}

Rot_n <-function (angles){
        dim<-length(angles)+2
	for (x in 1:dim){
		alpha=angles[x]
		a1=x+1
		a2=x+2
		basis[,a1]
		basis[,a2]
		gii=cos(alpha)
		gjj=cos(alpha)
		gji=-sin(alpha)
		gij=sin(alpha)	
#			Rmatrix[x,y]<-Rmatrix[x,y]+
	}
        return (Rmatrix)
}

objective<- function (x)
{
#	message(x)
	R_theta<-Rot_n(x)
	u1<-irA %*% R_theta %*% a_theta
	u2<-irD %*% R_theta %*% d_theta
	return(-sum(dnorm( c(u1, u2), mean = 0, sd = 1, log = TRUE) )	)
#	return (-shapiro.test( c(u1, u2) )$p.value)
}

true_a<-c()
guess<-c()

N<-10

A<-Posdef(N)
D<-Posdef(N)
B<-Posdef(N)

for (j in 1:1){

Ar<-sqrtm(A)$B
Dr<-sqrtm(D)$B
Br<-sqrtm(B)$B

irA<<-solve(sqrtm(A)$B)
irD<<-solve(sqrtm(D)$B)
irB<<-solve(sqrtm(B)$B)

p<-matrix(rnorm(N, mean = 0, sd = 1), ncol=1, nrow=N)
a<-Ar %*% p
p<-matrix(rnorm(N, mean = 0, sd = 1), ncol=1, nrow=N)
d<-Dr %*% p
p<-matrix(rnorm(N, mean = 0, sd = 1), ncol=1, nrow=N)
i<-Br %*% p

a<-a-mean(a)
d<-d-mean(d)
z<-a+d

sigma_a<-sqrt(mean(diag(A)))
sigma_d<-sqrt(mean(diag(D)))
rescale<-sqrt(var(z)/ (sigma_a^2+sigma_d^2) )
sigma_a<-sigma_a*rescale[1]
sigma_d<-sigma_d*rescale[1]

p<-matrix(rnorm(N, mean = 0, sd = 1), ncol=1, nrow=N)
p<-p-mean(p)
z_perp<-(p-(t(p) %*% z)[1]/( t(z) %*% z)[1] *z) 
z_perp<-z_perp*sqrt(var(z)[1]/var(z_perp)[1] )
z_hat<<-z/sqrt(sum(z^2))

a_theta<<-sigma_a^2/(sigma_a^2+sigma_d^2)*z+(sigma_a*sigma_d)/(sigma_a^2+sigma_d^2)*z_perp
d_theta<<-sigma_d^2/(sigma_a^2+sigma_d^2)*z-(sigma_a*sigma_d)/(sigma_a^2+sigma_d^2)*z_perp

#I<-diag(N)*0
#V<-join(list(I+2*sigma_a^2*solve(A), I, I, I+2*sigma_d^2*solve(D) ) )
#Z<-matrix(c(z, z), ncol=1, nrow=2*N)
#sol<-solve(V) %*% Z
#a_hat<-sol[1:N]
#d_hat<-sol[(N+1):(N*2)]

theta<-optim(list(rep(0, N-2)), objective, method="Brent",  lower = 0, upper = 2*pi)$par

true_a<-c(true_a, a)
guess<-c(guess, a_theta)
}
